name: Build, Push Image, and Release

on:
  push:
    branches: [ main ]
    paths:
      - "Directory.Packages.props"
      - ".github/workflows/build-and-release.yml"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  FRONTEND_DIR: web-site
  BACKEND_PROJECT: src/KoalaWiki/KoalaWiki.csproj
  DOCKERFILE: src/KoalaWiki/Dockerfile

jobs:
  build-push-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            web-site/package-lock.json

      - name: Compute image name (lowercase)
        shell: bash
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/koala-wiki" >> $GITHUB_ENV

      - name: Read version from Directory.Packages.props
        id: version
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          [xml]$xml = Get-Content -Raw "Directory.Packages.props"
          $pg = $xml.Project.PropertyGroup
          $versionTemplate = [string]$pg.Version
          if ([string]::IsNullOrWhiteSpace($versionTemplate)) { throw "Version not found in Directory.Packages.props" }
          # Build a property map from PropertyGroup
          $props = @{}
          foreach ($n in $pg.ChildNodes) {
            if ($n.NodeType -eq [System.Xml.XmlNodeType]::Element) {
              $props[$n.Name] = [string]$n.InnerText
            }
          }
          # Provide concrete TimeStamp replacement (UTC yyyyMMdd) if used
          $props['TimeStamp'] = (Get-Date -AsUTC).ToString('yyyyMMdd')
          # Replace $(Property) tokens (e.g., $(VersionSuffix), $(TimeStamp))
          $unresolved = New-Object System.Collections.Generic.List[string]
          $finalVersion = [regex]::Replace($versionTemplate, '\$\(([A-Za-z0-9_.-]+)\)', {
            param($m)
            $name = $m.Groups[1].Value
            if ($props.ContainsKey($name) -and -not [string]::IsNullOrWhiteSpace($props[$name])) { $props[$name] } else { $unresolved.Add($name) | Out-Null; '' }
          })
          if ($unresolved.Count -gt 0) { Write-Host "[warn] Unresolved version tokens -> $($unresolved -join ', '); replaced with empty string." }
          if ([string]::IsNullOrWhiteSpace($finalVersion)) { throw "Resolved version is empty" }
          "PKG_VERSION=$finalVersion" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "RELEASE_TAG=v$finalVersion" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "version=$finalVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          Write-Host "Version template: $versionTemplate"
          Write-Host "Final version: $finalVersion"

      - name: Build frontend (Vite -> src/KoalaWiki/wwwroot)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm run build

      - name: Show wwwroot summary
        run: |
          echo "Built frontend into src/KoalaWiki/wwwroot"
          ls -la src/KoalaWiki/wwwroot | head -n 50

      - name: Restore .NET
        run: dotnet restore KoalaWiki.sln

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Optional login to Aliyun Registry
        if: ${{ secrets.ALIYUN_REGISTRY != '' && secrets.ALIYUN_USERNAME != '' && secrets.ALIYUN_PASSWORD != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Build and push multi-arch Docker image (GHCR)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:v${{ env.PKG_VERSION }}
            ${{ env.IMAGE_NAME }}:latest
          build-args: |
            BUILD_CONFIGURATION=Release

      - name: Build and push image to Aliyun (optional)
        if: ${{ secrets.ALIYUN_REGISTRY != '' && secrets.ALIYUN_USERNAME != '' && secrets.ALIYUN_PASSWORD != '' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.ALIYUN_REGISTRY }}/koala-ai/koala-wiki:v${{ env.PKG_VERSION }}
            ${{ secrets.ALIYUN_REGISTRY }}/koala-ai/koala-wiki:latest
          build-args: |
            BUILD_CONFIGURATION=Release

      - name: Publish multi-platform backend packages
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $rids = @('win-x64','linux-x64','linux-arm64','osx-arm64')
          foreach ($rid in $rids) {
            $outDir = "out/$rid"
            dotnet publish "${{ env.BACKEND_PROJECT }}" -c Release -r $rid --self-contained false -p:Version="${{ env.PKG_VERSION }}" -o $outDir
            $zip = "OpenDeepWiki-${{ env.PKG_VERSION }}-$rid.zip"
            if (Test-Path $zip) { Remove-Item $zip -Force }
            Compress-Archive -Path "$outDir/*" -DestinationPath $zip
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OpenDeepWiki-${{ env.PKG_VERSION }}
          path: |
            OpenDeepWiki-${{ env.PKG_VERSION }}-win-x64.zip
            OpenDeepWiki-${{ env.PKG_VERSION }}-linux-x64.zip
            OpenDeepWiki-${{ env.PKG_VERSION }}-linux-arm64.zip
            OpenDeepWiki-${{ env.PKG_VERSION }}-osx-arm64.zip
          if-no-files-found: error
          retention-days: 14

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: OpenDeepWiki ${{ env.PKG_VERSION }}
          files: |
            OpenDeepWiki-${{ env.PKG_VERSION }}-win-x64.zip
            OpenDeepWiki-${{ env.PKG_VERSION }}-linux-x64.zip
            OpenDeepWiki-${{ env.PKG_VERSION }}-linux-arm64.zip
            OpenDeepWiki-${{ env.PKG_VERSION }}-osx-arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
